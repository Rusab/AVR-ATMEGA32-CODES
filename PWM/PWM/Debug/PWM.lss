
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000635  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  000007d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000253  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031a  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000012f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	//setting PWM pin (PD5) as output
    DDRD |= (1 << PIND5);
  6c:	8d 9a       	sbi	0x11, 5	; 17
	
	//setting PWM type: Inverting Fast PWM with ICR1 as top value and setting a prescalar of 64
	TCCR1A |= (1 << WGM11 | 1 << COM1A1 | 1 << COM1A0);
  6e:	8f b5       	in	r24, 0x2f	; 47
  70:	82 6c       	ori	r24, 0xC2	; 194
  72:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12 | 1 << WGM13 | 1 << CS11);
  74:	8e b5       	in	r24, 0x2e	; 46
  76:	8a 61       	ori	r24, 0x1A	; 26
  78:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = 39999; //PWM period counting from 0
  7a:	8f e3       	ldi	r24, 0x3F	; 63
  7c:	9c e9       	ldi	r25, 0x9C	; 156
  7e:	97 bd       	out	0x27, r25	; 39
  80:	86 bd       	out	0x26, r24	; 38

	
    while (1) 
    {
		OCR1A = ICR1 - 4000;	
  82:	86 b5       	in	r24, 0x26	; 38
  84:	97 b5       	in	r25, 0x27	; 39
  86:	80 5a       	subi	r24, 0xA0	; 160
  88:	9f 40       	sbci	r25, 0x0F	; 15
  8a:	9b bd       	out	0x2b, r25	; 43
  8c:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	87 ea       	ldi	r24, 0xA7	; 167
  92:	91 e6       	ldi	r25, 0x61	; 97
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
		_delay_ms(2000);
		OCR1A = ICR1 - 2000;
  a0:	86 b5       	in	r24, 0x26	; 38
  a2:	97 b5       	in	r25, 0x27	; 39
  a4:	80 5d       	subi	r24, 0xD0	; 208
  a6:	97 40       	sbci	r25, 0x07	; 7
  a8:	9b bd       	out	0x2b, r25	; 43
  aa:	8a bd       	out	0x2a, r24	; 42
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	87 ea       	ldi	r24, 0xA7	; 167
  b0:	91 e6       	ldi	r25, 0x61	; 97
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x46>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x50>
  bc:	00 00       	nop
  be:	e1 cf       	rjmp	.-62     	; 0x82 <main+0x16>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
