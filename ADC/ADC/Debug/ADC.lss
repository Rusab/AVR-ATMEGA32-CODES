
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ffe  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070a  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000064a  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000024c  00000000  00000000  000021c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000411  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cb9  00000000  00000000  0000281d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000034d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_16>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 11 01 	call	0x222	; 0x222 <main>
  64:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <enbFlash>:
	
	
	sendStr(str);
	
	
}
  6c:	95 9a       	sbi	0x12, 5	; 18
  6e:	8f e9       	ldi	r24, 0x9F	; 159
  70:	99 e1       	ldi	r25, 0x19	; 25
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <enbFlash+0x6>
  76:	00 c0       	rjmp	.+0      	; 0x78 <enbFlash+0xc>
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	95 98       	cbi	0x12, 5	; 18
  80:	08 95       	ret

00000082 <checkBusy>:
  82:	17 ba       	out	0x17, r1	; 23
  84:	97 9a       	sbi	0x12, 7	; 18
  86:	92 98       	cbi	0x12, 2	; 18
  88:	c7 9b       	sbis	0x18, 7	; 24
  8a:	04 c0       	rjmp	.+8      	; 0x94 <checkBusy+0x12>
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <enbFlash>
  90:	c7 99       	sbic	0x18, 7	; 24
  92:	fc cf       	rjmp	.-8      	; 0x8c <checkBusy+0xa>
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	87 bb       	out	0x17, r24	; 23
  98:	08 95       	ret

0000009a <sendChar>:
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
  9e:	0e 94 41 00 	call	0x82	; 0x82 <checkBusy>
  a2:	c8 bb       	out	0x18, r28	; 24
  a4:	97 98       	cbi	0x12, 7	; 18
  a6:	92 9a       	sbi	0x12, 2	; 18
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <enbFlash>
  ac:	18 ba       	out	0x18, r1	; 24
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <sendCom>:
  b2:	cf 93       	push	r28
  b4:	c8 2f       	mov	r28, r24
  b6:	0e 94 41 00 	call	0x82	; 0x82 <checkBusy>
  ba:	c8 bb       	out	0x18, r28	; 24
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	8b 77       	andi	r24, 0x7B	; 123
  c0:	82 bb       	out	0x12, r24	; 18
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <enbFlash>
  c6:	18 ba       	out	0x18, r1	; 24
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <clearDisplay>:
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 59 00 	call	0xb2	; 0xb2 <sendCom>
  d2:	87 ec       	ldi	r24, 0xC7	; 199
  d4:	99 e1       	ldi	r25, 0x19	; 25
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <clearDisplay+0xa>
  da:	00 c0       	rjmp	.+0      	; 0xdc <clearDisplay+0x10>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <shiftCursor>:
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	7c 01       	movw	r14, r24
  ee:	8b 01       	movw	r16, r22
  f0:	16 16       	cp	r1, r22
  f2:	17 06       	cpc	r1, r23
  f4:	e4 f4       	brge	.+56     	; 0x12e <shiftCursor+0x4e>
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	e1 14       	cp	r14, r1
  fc:	f1 04       	cpc	r15, r1
  fe:	51 f4       	brne	.+20     	; 0x114 <shiftCursor+0x34>
 100:	80 e1       	ldi	r24, 0x10	; 16
 102:	0e 94 59 00 	call	0xb2	; 0xb2 <sendCom>
 106:	87 ec       	ldi	r24, 0xC7	; 199
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <shiftCursor+0x2a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <shiftCursor+0x30>
 110:	00 00       	nop
 112:	09 c0       	rjmp	.+18     	; 0x126 <shiftCursor+0x46>
 114:	84 e1       	ldi	r24, 0x14	; 20
 116:	0e 94 59 00 	call	0xb2	; 0xb2 <sendCom>
 11a:	87 ec       	ldi	r24, 0xC7	; 199
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <shiftCursor+0x3e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <shiftCursor+0x44>
 124:	00 00       	nop
 126:	21 96       	adiw	r28, 0x01	; 1
 128:	0c 17       	cp	r16, r28
 12a:	1d 07       	cpc	r17, r29
 12c:	31 f7       	brne	.-52     	; 0xfa <shiftCursor+0x1a>
 12e:	0e 94 41 00 	call	0x82	; 0x82 <checkBusy>
 132:	97 98       	cbi	0x12, 7	; 18
 134:	92 9a       	sbi	0x12, 2	; 18
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	ff 90       	pop	r15
 140:	ef 90       	pop	r14
 142:	08 95       	ret

00000144 <initLCD>:
 144:	81 b3       	in	r24, 0x11	; 17
 146:	84 6a       	ori	r24, 0xA4	; 164
 148:	81 bb       	out	0x11, r24	; 17
 14a:	8f e5       	ldi	r24, 0x5F	; 95
 14c:	9a ee       	ldi	r25, 0xEA	; 234
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <initLCD+0xa>
 152:	00 c0       	rjmp	.+0      	; 0x154 <initLCD+0x10>
 154:	00 00       	nop
 156:	8c e3       	ldi	r24, 0x3C	; 60
 158:	0e 94 59 00 	call	0xb2	; 0xb2 <sendCom>
 15c:	87 ec       	ldi	r24, 0xC7	; 199
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <initLCD+0x1c>
 164:	00 c0       	rjmp	.+0      	; 0x166 <initLCD+0x22>
 166:	00 00       	nop
 168:	8e e0       	ldi	r24, 0x0E	; 14
 16a:	0e 94 59 00 	call	0xb2	; 0xb2 <sendCom>
 16e:	87 ec       	ldi	r24, 0xC7	; 199
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <initLCD+0x2e>
 176:	00 c0       	rjmp	.+0      	; 0x178 <initLCD+0x34>
 178:	00 00       	nop
 17a:	08 95       	ret

0000017c <setCursor>:
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ec 01       	movw	r28, r24
 186:	8b 01       	movw	r16, r22
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	0e 94 59 00 	call	0xb2	; 0xb2 <sendCom>
 18e:	87 ec       	ldi	r24, 0xC7	; 199
 190:	99 e1       	ldi	r25, 0x19	; 25
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <setCursor+0x16>
 196:	00 c0       	rjmp	.+0      	; 0x198 <setCursor+0x1c>
 198:	00 00       	nop
 19a:	ce 01       	movw	r24, r28
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	40 97       	sbiw	r24, 0x10	; 16
 1a0:	78 f4       	brcc	.+30     	; 0x1c0 <setCursor+0x44>
 1a2:	c8 01       	movw	r24, r16
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	02 97       	sbiw	r24, 0x02	; 2
 1a8:	58 f4       	brcc	.+22     	; 0x1c0 <setCursor+0x44>
 1aa:	02 30       	cpi	r16, 0x02	; 2
 1ac:	11 05       	cpc	r17, r1
 1ae:	0c f0       	brlt	.+2      	; 0x1b2 <setCursor+0x36>
 1b0:	a8 96       	adiw	r28, 0x28	; 40
 1b2:	be 01       	movw	r22, r28
 1b4:	61 50       	subi	r22, 0x01	; 1
 1b6:	71 09       	sbc	r23, r1
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 70 00 	call	0xe0	; 0xe0 <shiftCursor>
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <sendStr>:
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	ec 01       	movw	r28, r24
 1d0:	88 81       	ld	r24, Y
 1d2:	88 23       	and	r24, r24
 1d4:	31 f0       	breq	.+12     	; 0x1e2 <sendStr+0x18>
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	0e 94 4d 00 	call	0x9a	; 0x9a <sendChar>
 1dc:	89 91       	ld	r24, Y+
 1de:	81 11       	cpse	r24, r1
 1e0:	fb cf       	rjmp	.-10     	; 0x1d8 <sendStr+0xe>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <sendNum>:
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	2f 97       	sbiw	r28, 0x0f	; 15
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	4a e0       	ldi	r20, 0x0A	; 10
 1fe:	be 01       	movw	r22, r28
 200:	6f 5f       	subi	r22, 0xFF	; 255
 202:	7f 4f       	sbci	r23, 0xFF	; 255
 204:	0e 94 4e 01 	call	0x29c	; 0x29c <__itoa_ncheck>
 208:	ce 01       	movw	r24, r28
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <sendStr>
 210:	2f 96       	adiw	r28, 0x0f	; 15
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <main>:


int main(void)
{

	initLCD();
 222:	0e 94 a2 00 	call	0x144	; 0x144 <initLCD>
	clearDisplay();
 226:	0e 94 66 00 	call	0xcc	; 0xcc <clearDisplay>
	

	
    ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);	//128 Prescalar selection
 22a:	86 b1       	in	r24, 0x06	; 6
 22c:	87 60       	ori	r24, 0x07	; 7
 22e:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1 << ADLAR) | (1 << REFS0) ;					//8bit Left shit and Capacitor AVCC reference
 230:	87 b1       	in	r24, 0x07	; 7
 232:	80 66       	ori	r24, 0x60	; 96
 234:	87 b9       	out	0x07, r24	; 7
 	ADCSRA |= (1 << ADIE) | (1 << ADEN);					//turn on adc feature and interupt
 236:	86 b1       	in	r24, 0x06	; 6
 238:	88 68       	ori	r24, 0x88	; 136
 23a:	86 b9       	out	0x06, r24	; 6
	
	sei(); 
 23c:	78 94       	sei
	
	ADCSRA |= (1 << ADSC);									//first conversion
 23e:	36 9a       	sbi	0x06, 6	; 6
 240:	ff cf       	rjmp	.-2      	; 0x240 <main+0x1e>

00000242 <__vector_16>:
    }
}


ISR(ADC_vect)
{
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
	sendNum(ADCH);
 264:	85 b1       	in	r24, 0x05	; 5
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <sendNum>
	setCursor(1,1);
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 be 00 	call	0x17c	; 0x17c <setCursor>
	
	ADCSRA |= (1 << ADSC);									//second conversion
 278:	36 9a       	sbi	0x06, 6	; 6
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	7f 91       	pop	r23
 288:	6f 91       	pop	r22
 28a:	5f 91       	pop	r21
 28c:	4f 91       	pop	r20
 28e:	3f 91       	pop	r19
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <__itoa_ncheck>:
 29c:	bb 27       	eor	r27, r27
 29e:	4a 30       	cpi	r20, 0x0A	; 10
 2a0:	31 f4       	brne	.+12     	; 0x2ae <__itoa_ncheck+0x12>
 2a2:	99 23       	and	r25, r25
 2a4:	22 f4       	brpl	.+8      	; 0x2ae <__itoa_ncheck+0x12>
 2a6:	bd e2       	ldi	r27, 0x2D	; 45
 2a8:	90 95       	com	r25
 2aa:	81 95       	neg	r24
 2ac:	9f 4f       	sbci	r25, 0xFF	; 255
 2ae:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__utoa_common>

000002b2 <__utoa_ncheck>:
 2b2:	bb 27       	eor	r27, r27

000002b4 <__utoa_common>:
 2b4:	fb 01       	movw	r30, r22
 2b6:	55 27       	eor	r21, r21
 2b8:	aa 27       	eor	r26, r26
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	aa 1f       	adc	r26, r26
 2c0:	a4 17       	cp	r26, r20
 2c2:	10 f0       	brcs	.+4      	; 0x2c8 <__utoa_common+0x14>
 2c4:	a4 1b       	sub	r26, r20
 2c6:	83 95       	inc	r24
 2c8:	50 51       	subi	r21, 0x10	; 16
 2ca:	b9 f7       	brne	.-18     	; 0x2ba <__utoa_common+0x6>
 2cc:	a0 5d       	subi	r26, 0xD0	; 208
 2ce:	aa 33       	cpi	r26, 0x3A	; 58
 2d0:	08 f0       	brcs	.+2      	; 0x2d4 <__utoa_common+0x20>
 2d2:	a9 5d       	subi	r26, 0xD9	; 217
 2d4:	a1 93       	st	Z+, r26
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	79 f7       	brne	.-34     	; 0x2b8 <__utoa_common+0x4>
 2da:	b1 11       	cpse	r27, r1
 2dc:	b1 93       	st	Z+, r27
 2de:	11 92       	st	Z+, r1
 2e0:	cb 01       	movw	r24, r22
 2e2:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <strrev>

000002e6 <strrev>:
 2e6:	dc 01       	movw	r26, r24
 2e8:	fc 01       	movw	r30, r24
 2ea:	67 2f       	mov	r22, r23
 2ec:	71 91       	ld	r23, Z+
 2ee:	77 23       	and	r23, r23
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <strrev+0x4>
 2f2:	32 97       	sbiw	r30, 0x02	; 2
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <strrev+0x18>
 2f6:	7c 91       	ld	r23, X
 2f8:	6d 93       	st	X+, r22
 2fa:	70 83       	st	Z, r23
 2fc:	62 91       	ld	r22, -Z
 2fe:	ae 17       	cp	r26, r30
 300:	bf 07       	cpc	r27, r31
 302:	c8 f3       	brcs	.-14     	; 0x2f6 <strrev+0x10>
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
